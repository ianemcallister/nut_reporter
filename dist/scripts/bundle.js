config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("nutReporter",["ngRoute"]);function mainController(t,e,n,o,i,a,s){console.log("in the main controller");var r=this;function l(e,t){return e.getFullYear()+"-0"+(e.getMonth()+1)+"-0"+e.getDate()+"T"+t}r.date=new Date,r.strTime="00:00:00-07:00",r.endTime="23:59:59-07:00",r.selectedEmployee="",r.selectedLocation="",r.txsSummary={},r.locationsList=o,r.employeeList=i,r.CMEList=a,r.submitQuery=function(){s.queries.CME_Transactions({analysis:["sales"],location:r.selectedLocation,begin_time:l(r.date,r.strTime),end_time:l(r.date,r.endTime),devices:[],employees:[r.selectedEmployee],adjustments:[],sales_hrs:7,labor_hrs:7.5,base_rate_hrly:1200,emails:{employee:[],supervisors:[],other:[]},CME_info:{name:""}}).then(function(e){r.txsSummary=e,console.log(e),t.$apply()})}}function dataService(c){return{queries:{CME_Transactions:function(e){return console.log("sending query for transactions"),console.log(e),new Promise(function(t,n){c({method:"POST",url:"/queryEmployeeTransactions",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){n(e)})})}},sqr_locations:{list:function(){var e={};return console.log("getting locations list"),new Promise(function(t,n){c({method:"POST",url:"/squarepos/locations",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){n(e)})})}},sqr_employees:{list:function(e,t,n,o,i,a,s,r){var l={status:e,external_id:t,limit:n,order:o,begin_updated_at:i,end_updated_at:a,begin_created_at:s,end_created_at:r};return console.log("getting employees list"),new Promise(function(t,n){c({method:"POST",url:"/squarepos/employees",headers:{"Content-Type":"application/json"},data:l}).then(function(e){t(e.data)},function(e){n(e)})})}},sqr_txs:{full_day:function(e,t,n){var o={location:e,start:t,end:n};return console.log("getting day's Transactions"),new Promise(function(t,n){c({method:"POST",url:"/squarepos/txs",headers:{"Content-Type":"application/json"},data:o}).then(function(e){t(e.data)},function(e){n(e)})})},select_txs:function(e){var o={};return console.log("getting sqr txs"),e.forEach(function(e){}),new Promise(function(t,n){c({method:"POST",url:"/v1/batch",headers:{"Content-Type":"application/json"},data:o}).then(function(e){t(e.data)},function(e){n(e)})})}},sales_days:{compile_batch:function(e){return new Promise(function(t,n){c({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){n(e)})})}},test:function(){console.log("this is the data center test")}}}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/dailyScorecardGen.htm",controller:"mainController",controllerAs:"vm",resolve:{locationsList:locationsList,employeeList:employeeList,CMEList:CMEList}}).otherwise({redirectTo:"/"})}function locationsList(){return new Promise(function(e,t){e([{value:"Oregon",id:"M53KQT35YKE5C"},{value:"Online",id:"S4P16GQRK21CF"},{value:"Utah",id:"14E8S7P16JQDM"}])})}function employeeList(){return new Promise(function(e,t){e([{value:"Ian McAllister",id:"rUxLgAqsVklCN_14dfbE"},{value:"Steve Young",id:"something"}])})}function CMEList(){return new Promise(function(e,t){e("good test")})}angular.module("nutReporter").controller("mainController",mainController),mainController.$inject=["$scope","$log","$location","locationsList","employeeList","CMEList","dataService"],angular.module("nutReporter").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("nutReporter").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
